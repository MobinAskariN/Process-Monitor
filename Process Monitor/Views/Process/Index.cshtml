@{
    ViewData["Title"] = "Process Monitor";
    var processData = ViewBag.processData as List<Process_Monitor.Models.ProcessData>;
    var grouping = ViewBag.grouping as List<Process_Monitor.Models.Grouping>;
    var relation = ViewBag.relation as List<Process_Monitor.Models.Relations>;
    var coloring = ViewBag.coloring as List<Process_Monitor.Models.Coloring>;
    Layout = null;
}
@using System.Web

<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Nested Nodes</title>
    <link rel="stylesheet" href="@Url.Content("~/Content/styles.css")?v=@DateTime.Now.Ticks.ToString()">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <button id="save-button" onclick="saveNodePositions()">Save</button>

    <div class="child-area">
        <h3>Child Nodes</h3>
        <div class="child-list">
            @{
                if (processData == null || processData.Count == 0)
                {
                    <p>خطا: هیچ داده فرآیندی لود نشده است.</p>
                }
                else
                {
                    foreach (Process_Monitor.Models.ProcessData p in processData)
                    {
                        if (p.previous_process_group != p.process_group)
                        {
                            p.x = -1;
                            p.y = -1;
                        }

                        string style = "";
                        string parentClass = "node child";
                        if (p.x != null && p.y != null && p.x != -1 && p.y != -1)
                        {
                            style = "position: absolute; left: " + p.x.ToString() + "px; top: " + p.y.ToString() + "px;";
                            parentClass = "node child in-canvas";
                        }
                        else
                        {
                            style = "";
                            parentClass = "node child";
                        }
                        string iconClass = "";
                        switch (p.start_method)
                        {
                            case "subprocess":
                                iconClass = "fas fa-cogs";
                                break;
                            case "user":
                                iconClass = "fas fa-user";
                                break;
                            case "periodic":
                                iconClass = "fas fa-clock";
                                break;
                            default:
                                iconClass = "fas fa-circle";
                                break;
                        }
                        <div class="@parentClass" id="child-@p.process_id.ToString()" data-parent-id="parent-@p.process_group.ToString()" style="@style"><i class="@iconClass"></i> @p.process_title</div>
                    }
                }
            }
        </div>
    </div>

    <div class="toolbar">
        <button class="toolbar-btn" id="zoom-in"><i class="fas fa-search-plus"></i></button>
        <button class="toolbar-btn" id="zoom-out"><i class="fas fa-search-minus"></i></button>
    </div>

    <div class="canvas-container">
        <div class="canvas" id="canvas">
            <svg class="arrows" width="100%" height="100%"></svg>

            @helper RenderNodes(List<Process_Monitor.Models.Grouping> items, int? parentId, int depth = 0)
            {
                List<Process_Monitor.Models.Grouping> children = new List<Process_Monitor.Models.Grouping>();
                foreach (var item in items)
                {
                    if (item.parent_id == parentId)
                    {
                        children.Add(item);
                    }
                }

                if (children.Count == 0)
                {
                    if (parentId == null)
                    {
                        <p>خطا: هیچ گروه‌بندی ریشه‌ای لود نشده است.</p>
                    }
                    return;
                }

                foreach (var child in children)
                {
                    string style = "";
                    if (child.x != null && child.y != null && child.width != null && child.height != null)
                    {
                        style = "position: absolute; left: " + child.x.ToString() + "px; top: " + child.y.ToString() + "px; width: " + child.width.ToString() + "px; height: " + child.height.ToString() + "px;";
                    }
                    <div class="node parent" id="parent-@child.group_id.ToString()" style="@style" data-depth="@depth">
                        <div class="parent-title">@child.group_title</div>
                        @RenderNodes(items, child.group_id, depth + 1)
                        <div class="resize-handle"></div>
                    </div>
                }
            }

            @if (grouping == null || grouping.Count == 0)
            {
                <p>خطا: هیچ گروه‌بندی لود نشده است.</p>
            }
            else
            {
                @RenderNodes(grouping, null, 0)
            }
            <div class="tooltip" id="tooltip"></div>

        </div>
    </div>
    <div class="modal" id="modal">
        <div class="modal-content">
            <span class="modal-close">×</span>
            <div id="modal-body"></div>
        </div>
    </div>

    <script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
            return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
            if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
                try {
                    var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                    var firstSheetName = workbook.SheetNames[0];
                    var worksheet = workbook.Sheets[firstSheetName];

                    // Convert sheet to JSON to filter blank rows
                    var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                    // Filter out blank rows (rows where all cells are empty, null, or undefined)
                    var filteredData = jsonData.filter(row => row.some(filledCell));

                    // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                    var headerRowIndex = filteredData.findIndex((row, index) =>
                        row.filter(filledCell).length >= filteredData[index + 1] ?.filter(filledCell).length
                );
                    // Fallback
                    if (headerRowIndex === -1 || headerRowIndex > 25) {
                        headerRowIndex = 0;
                    }

                    // Convert filtered JSON back to CSV
                    var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                    csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                    return csv;
                } catch (e) {
                    console.error(e);
                    return "";
                }
            }
            return gk_fileData[filename] || "";
        }
    </script>

    <script>
        window.relationships = {};
        @foreach (var r in relation)
        {
            <text>
            if (!window.relationships["child-@r.beginning_process_id.ToString()"]) window.relationships["child-@r.beginning_process_id.ToString()"] = [];
            window.relationships["child-@r.beginning_process_id.ToString()"].push("child-@r.ending_process_id.ToString()");
            </text>
        }

        window.relationshipVariables = {
            @foreach (var r in relation)
            {
                var key = "child-" + r.beginning_process_id.ToString() + "-child-" + r.ending_process_id.ToString();
                <text>"@key": [</text>

                var paramList = new List<KeyValuePair<string, string>>();
                if (r.parameters != null)
                {
                    foreach (var kv in r.parameters)
                    {
                        paramList.Add(kv);
                    }
                }

                for (int i = 0; i < paramList.Count; i++)
                {
                    var k = paramList[i].Key;
                    var v = paramList[i].Value;
                    var isLast = (i == paramList.Count - 1);
                    <text>{ "@k": "@v" }@(isLast ? "" : ", ")</text>
                }

                <text>],</text>
            }
        };

        window.childNodeData = {};
        @for (int i = 0; i < (processData != null ? processData.Count : 0); i++)
        {
            var item = processData[i];
            var nodeKey = "child-" + processData[i].process_id.ToString();
            <text>
            window.childNodeData["@nodeKey"] = {
                type1: "@item.description_type1",
                type2: "@item.description_type2",
                repeatCount: @item.repetition_num,
                avgTime: "@item.average_duration",
                processType: "@item.start_method"
            };
            </text>
        }

        window.depthColors = {};
            @foreach (var c in coloring)
            {
                <text>
                window.depthColors[@c.depth] = "@c.color.Replace("(", "").Replace(")", "")";
                </text>
            }
    </script>

    <script src="@Url.Content("~/Scripts/script.js")?v=@DateTime.Now.Ticks.ToString()"></script>
</body>
</html>